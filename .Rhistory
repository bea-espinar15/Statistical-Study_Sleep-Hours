library(fdth)
library(psych)
library(moments)
library(ggrepel)
library(tidyverse)
# PASO 2: Traducimos la información del fichero de datos (excel) "sleepdata_2.csv" a dataframe
# --------------------------------------------------------------------------------------------
datos <- read_delim("sleepdata_2.csv",
delim = ";", escape_double = FALSE, na = "NA",
trim_ws = TRUE)
# PASO 3: Nos quedamos con la variable principal de estudio, eliminando valores nulos
# -----------------------------------------------------------------------------------
# dataframe de horas de sueño (HS)
horas.sueño <- datos %>% select(12) %>% filter(!is.na(12))
# dataframe de horas de sueño (HS)
horas.suenyo <- datos %>% select(12) %>% filter(!is.na(12))
horas.suenyo
# dataframe de horas de sueño (HS)
horas.suenyo <- datos %>% select(12) %>% filter(!is.na(12))
horas.suenyo$HS <- horas.suenyo$`Time in bed (seconds)` / 3600
horas.suenyo <- horas.suenyo %>% select(2)
horas.suenyoç
horas.suenyo
ggplot(horas.suenyo, aes(x = HS)) +
geom_density(color = "#71c55b",
fill = "#71c55b",
alpha = 0.25,
lwd = 1) +
xlab("Horas de sueño") +
ylab("Densidad") +
ggtitle("Función de densidad del gasto en educación por hogar")
ObtenerVector <- function(tib) {
for (i in tib)
vec <- i
return(vec)
}
tib.HS <- as_tibble(horas.suenyo)
vec.HS <- ObtenerVector(tib.HS[1])
qqnorm(vec.HS)
qqline(vec.HS)
shapiro.test(vec.HS)
car::qqplot(vec.HS)
qqplot(vec.HS)
qqplots(vec.HS)
qqnorm(vec.HS)
ggplot(horas.suenyo, aes(x = HS)) +
geom_density(color = "#71c55b",
fill = "#71c55b",
alpha = 0.25,
lwd = 1) +
xlab("Horas de sueño") +
ylab("Densidad") +
ggtitle("Función de densidad del gasto en educación por hogar")
View(horas.suenyo)
# guardamos la variable como dataframe
df.HS <- datos %>% select(12) %>% filter(!is.na(12))
# pasamos de segundos a horas
df.HS$HS <- df.HS$`Time in bed (seconds)` / 3600
df.HS <- df.HS %>% select(2)
# guardamos la variable como tibble
tib.HS <- as_tibble(df.HS)
# guardamos la variable como vector
vec.HS <- ObtenerVector(tib.HS)
# tamaño de la muestra
n.HS <- as.numeric(count(df.HS))
# guardamos la variable como dataframe
df.HSyCS <- datos %>% select(3,12) %>% filter(!is.na(3) & !is.na(12))
df.HSyCS.CS <- df.HSyCS %>% select(1)
# pasamos la calidad de sueño de char a numeric
df.HSyCS.CS$CS <- as.numeric(df.HSyCS.CS$`Sleep quality`)
df.HSyCS.CS <- df.HSyCS.CS %>% select(2)
df.HSyCS
df.HS
# PASO 3: Traducimos la información del fichero de datos (excel) "sleepdata_2.csv" a dataframe
# --------------------------------------------------------------------------------------------
datos <- read_delim("sleepdata_2.csv",
delim = ";", escape_double = FALSE, na = "NA",
trim_ws = TRUE)
# guardamos la variable como tibble
tib.HS <- datos %>% select(12) %>% filter(!is.na(12))
# pasamos de segundos a horas
tib.HS$HS <- tib.HS$`Time in bed (seconds)` / 3600
tib.HS <- tib.HS %>% select(2)
# guardamos la variable como vector
vec.HS <- ObtenerVector(tib.HS)
# guardamos la variable como dataframe
df.HS <- data.frame(HS = vec.HS)
# tamaño de la muestra
n.HS <- as.numeric(count(df.HS))
# guardamos la variable como dataframe
tib.HSyCS <- datos %>% select(3,12) %>% filter(!is.na(3) & !is.na(12))
tib.HSyCS.CS <- tib.HSyCS %>% select(1)
# pasamos la calidad de sueño de char a numeric
tib.HSyCS.CS$CS <- as.numeric(tib.HSyCS.CS$`Sleep quality`)
tib.HSyCS
# pasamos la calidad de sueño de char a numeric
tib.HSyCS.CS$CS <- parse_number(tib.HSyCS.CS$`Sleep quality`)
tib.HSyCS.CS
# PASO 3: Traducimos la información del fichero de datos (excel) "sleepdata_2.csv" a dataframe
# --------------------------------------------------------------------------------------------
datos <- read_delim("sleepdata_2.csv",
delim = ";", escape_double = FALSE, na = "NA",
trim_ws = TRUE)
# guardamos la variable como tibble
tib.HS <- datos %>% select(12) %>% filter(!is.na(12))
# cambiamos el nombre de la columna
tib.HS <- rename(tib.HS, HS = `Time in bed (seconds)`)
# pasamos de segundos a horas
tib.HS <- tib.HS[1] / 3600
tib.HS
class(datos)
class(tib.HS)
# guardamos la variable como tibble
df.HS <- datos %>% select(12) %>% filter(!is.na(12))
# cambiamos el nombre de la columna
df.HS <- rename(df.HS, HS = `Time in bed (seconds)`)
# pasamos de segundos a horas
df.HS <- df.HS[1] / 3600
# guardamos la variable como dataframe
df.HS <- datos %>% select(12) %>% filter(!is.na(12))
# cambiamos el nombre de la columna
df.HS <- rename(df.HS, HS = `Time in bed (seconds)`)
# pasamos de segundos a horas
df.HS <- df.HS[1] / 3600
# guardamos la variable como tibble
tib.HS <- as_tibble(df.HS)
# guardamos la variable como vector
vec.HS <- ObtenerVector(tib.HS[1])
# tamaño de la muestra
n.HS <- as.numeric(count(df.HS))
# guardamos la variable como dataframe
df.CSyHS <- datos %>% select(3,12) %>% filter(!is.na(3) & !is.na(12))
# cambiamos el nombre de las columnas
df.CSyHS <- rename(df.CSyHS, CS = `Sleep Quality`, HS = `Time in bed (seconds)`)
# pasamos de segundos a horas
df.CSyHS <- df.CSyHS[1] / 3600
# pasamos de segundos a horas
df.CSyHS <- df.CSyHS[2] / 3600
df.CSyHS
# guardamos la variable como dataframe
df.CSyHS <- datos %>% select(3,12) %>% filter(!is.na(3) & !is.na(12))
# cambiamos el nombre de las columnas
df.CSyHS <- rename(df.CSyHS, CS = `Sleep Quality`, HS = `Time in bed (seconds)`)
df.CSyHS
# guardamos la variable como dataframe
df.HS <- datos %>% select(13) %>% filter(!is.na(13))
# cambiamos el nombre de la columna
df.HS <- rename(df.HS, HS = `Time asleep (seconds)`)
# pasamos de segundos a horas
df.HS <- df.HS[1] / 3600
# guardamos la variable como tibble
tib.HS <- as_tibble(df.HS)
# guardamos la variable como vector
vec.HS <- ObtenerVector(tib.HS[1])
# tamaño de la muestra
n.HS <- as.numeric(count(df.HS))
df.HS
tib.HS
vec.HS
n.HS
# guardamos la variable como dataframe
df.CSyHS <- datos %>% select(3,13) %>% filter(!is.na(3) & !is.na(13))
# pasamos las horas de sueño de segundos a horas
df.CSyHS$HS <- df.CSyHS$`Time asleep (seconds)` / 3600
df.CSyHS
df.CSyHS <- df.CSyHS %>% select(1,3)
df.CSyHS
# guardamos la variable como dataframe
df.HSyCS <- datos %>% select(3,13) %>% filter(!is.na(3) & !is.na(13))
# pasamos las horas de sueño de segundos a horas
df.HSyCS$HS <- df.HSyCS$`Time asleep (seconds)` / 3600
df.HSyCS <- df.HSyCS %>% select(1,3)
# pasamos la calidad del sueño de char a numeric (viene en %)
df.HSyCS$CS <- parse_number(df.HSyCS$`Sleep Quality`)
df.HSyCS
df.HSyCS <- df.HSyCS %>% select(2,3)
df.HSyCS
df.HSyCS <- datos %>% select(3,13) %>% filter(!is.na(3) & !is.na(13))
# pasamos las horas de sueño de segundos a horas
df.HSyCS$HS <- df.HSyCS$`Time asleep (seconds)` / 3600
df.HSyCS <- df.HSyCS %>% select(1,3)
# pasamos la calidad del sueño de char a numeric (viene en %)
df.HSyCS$CS <- parse_number(df.HSyCS$`Sleep Quality`)
df.HSyCS <- df.HSyCS %>% select(2,3)
class(df.HSyCS)
df.HSyCS
View(df.HSyCS)
df.HS <- datos %>% select(13) %>% filter(!is.na(13))
# cambiamos el nombre de la columna
df.HS <- rename(df.HS, HS = `Time asleep (seconds)`)
# pasamos de segundos a horas
df.HS <- df.HS[1] / 3600
# guardamos la variable como tibble
tib.HS <- as_tibble(df.HS)
# guardamos la variable como vector
vec.HS <- ObtenerVector(tib.HS[1])
# tamaño de la muestra
n.HS <- as.numeric(count(df.HS))
# HORAS DE SUEÑO y CALIDAD DEL SUEÑO
# guardamos la variable como dataframe
tib.HSyCS <- datos %>% select(3,13) %>% filter(!is.na(3) & !is.na(13))
# pasamos las horas de sueño de segundos a horas
tib.HSyCS$HS <- tib.HSyCS$`Time asleep (seconds)` / 3600
tib.HSyCS <- tib.HSyCS %>% select(1,3)
# pasamos la calidad del sueño de char a numeric (viene en %)
tib.HSyCS$CS <- parse_number(tib.HSyCS$`Sleep Quality`)
tib.HSyCS <- tib.HSyCS %>% select(2,3)
tib.HSyCS
df.HS
tib.HSyCS
# separamos las variables
tib.HSyCS.HS <- tib.HSyCS[1]
tib.HSyCS.CS <- tib.HSyCS[2]
tib.HSyCS.HS
tib.HSyCS.CS
# guardamos las variables como dataframes
df.HSyCS.HS <- data.frame(HS = vec.HSyCS.HS)
df.HSyCS.CS <- data.frame(CS = vec.HSyCS.CS)
# guardamos las variables como vectores
vec.HSyCS.HS <- ObtenerVector(tib.HSyCS.HS[1])
vec.HSyCS.CS <- ObtenerVector(tib.HSyCS.CS[1])
# guardamos las variables como dataframes
df.HSyCS.HS <- data.frame(HS = vec.HSyCS.HS)
df.HSyCS.CS <- data.frame(CS = vec.HSyCS.CS)
# tamaño de las muestras
n.HSyCS <- as.numeric(count(df.HSyCS.HS))
n.HSyCS
tib.HSyCS <- datos %>% select(3,13) %>% filter(!is.na(3) & !is.na(13))
# pasamos las horas de sueño de segundos a horas
tib.HSyCS$HS <- tib.HSyCS$`Time asleep (seconds)` / 3600
tib.HSyCS <- tib.HSyCS %>% select(1,3)
# pasamos la calidad del sueño de char a numeric (viene en %)
tib.HSyCS$CS <- parse_number(tib.HSyCS$`Sleep Quality`)
tib.HSyCS <- tib.HSyCS %>% select(2,3)
# separamos las variables
tib.HS <- tib.HSyCS[1]
tib.CS <- tib.HSyCS[2]
# guardamos las variables como vectores
vec.HS <- ObtenerVector(tib.HS[1])
vec.CS <- ObtenerVector(tib.CS[1])
# guardamos las variables como dataframes
df.HS <- data.frame(HS = vec.HS)
df.CS <- data.frame(CS = vec.CS)
# tamaño de la muestra
n <- as.numeric(count(df.HS))
qqnorm(vec.HS)
qqline(vec.HS)
qqPlot(vec.HS)
car::qqPlot(vec.HS)
library(car)
install.packages(car)
install.packages("car")
library(car)
source("~/Desktop/Git-EA/Proyecto_EA.R")
car::qqPlot(vec.HS)
library(car)
#####################################################################################
#
# TRABAJO FINAL DE ESTADÍSTICA APLICADA
#
# Curso 2021-22
# Autores: Beatriz Espinar Aragón
#          Steven Mallqui Aguilar
# DNIs: 51139183V
#       51750233A
#
# Nota:
# El contenido del fichero de datos, los pasos necesarios para obtener el dataframe
# y otra información relevante quedan explicados en la memoria del proyecto
#
#####################################################################################
# PASO 1: Importamos las librerías necesarias
# -------------------------------------------
library(readr)
library(dplyr)
library(janitor)
library(ggplot2)
library(fdth)
library(psych)
library(moments)
library(ggrepel)
library(tidyverse)
library(car)
# PASO 2: Codificamos las funciones que vamos a utilizar
# ------------------------------------------------------
# devuelve un vector con el contenido de un tibble
ObtenerVector <- function(tib) {
for (i in tib)
vec <- i
return(vec)
}
# PASO 3: Traducimos la información del fichero de datos (excel) "sleepdata_2.csv" a dataframe
# --------------------------------------------------------------------------------------------
datos <- read_delim("sleepdata_2.csv",
delim = ";", escape_double = FALSE, na = "NA",
trim_ws = TRUE)
# PASO 4: Nos quedamos con las variables de estudio, eliminando valores nulos
# -----------------------------------------------------------------------------------
# HORAS DE SUEÑO y CALIDAD DEL SUEÑO
# guardamos la variable como dataframe
tib.HSyCS <- datos %>% select(3,13) %>% filter(!is.na(3) & !is.na(13))
# pasamos las horas de sueño de segundos a horas
tib.HSyCS$HS <- tib.HSyCS$`Time asleep (seconds)` / 3600
tib.HSyCS <- tib.HSyCS %>% select(1,3)
# pasamos la calidad del sueño de char a numeric (viene en %)
tib.HSyCS$CS <- parse_number(tib.HSyCS$`Sleep Quality`)
tib.HSyCS <- tib.HSyCS %>% select(2,3)
# separamos las variables
tib.HS <- tib.HSyCS[1]
tib.CS <- tib.HSyCS[2]
# guardamos las variables como vectores
vec.HS <- ObtenerVector(tib.HS[1])
vec.CS <- ObtenerVector(tib.CS[1])
# guardamos las variables como dataframes
df.HS <- data.frame(HS = vec.HS)
df.CS <- data.frame(CS = vec.CS)
# tamaño de la muestra
n <- as.numeric(count(df.HS))
car::qqPlot(vec.HS)
library(readr)
library(dplyr)
library(janitor)
library(ggplot2)
library(fdth)
library(psych)
library(moments)
library(ggrepel)
library(tidyverse)
# PASO 2: Codificamos las funciones que vamos a utilizar
# ------------------------------------------------------
# devuelve un vector con el contenido de un tibble
ObtenerVector <- function(tib) {
for (i in tib)
vec <- i
return(vec)
}
# Añade a un tibble una columna con los intervalos indicados
CrearIntervalos <- function(vec, tib) {
interv <- c()
for (i in 1:(length(vec) - 1))
interv <- c(interv, paste('[', vec[i], ', ', vec[i + 1], ')', sep = ''))
# metemos los intervalos en el tibble
tib <- cbind(tib, 'HS' = interv)
return(tib)
}
# mete los datos del vector en una nueva columna del tibble
ObtenerTibbleFA <- function(vec, tib) {
tib <- cbind(tib, 'f.a.' = vec)
return(tib)
}
# calcula las frecuencias relativas
FrecuenciasRelativas <- function(vec_abs) {
rel <- c()
for (i in 1:length(vec_abs))
rel <- c(rel, as.numeric(vec_abs[i] / n))
return(rel)
}
# mete los datos del vector en un tibble que crea
ObtenerTibbleFR <- function(vec, tib) {
tib <- cbind(tib, 'f.r.' = vec)
return(tib)
}
# calcula la cuasivarianza
CalcularCuasivar <- function(var, n) {
return(var * n / (n - 1))
}
# calcula el coeficiente de variación
CalcularCoefVar <- function(desv.tip, media) {
return(desv.tip / media)
}
# PASO 3: Traducimos la información del fichero de datos (excel) "sleepdata_2.csv" a dataframe
# --------------------------------------------------------------------------------------------
datos <- read_delim("sleepdata_2.csv",
delim = ";", escape_double = FALSE, na = "NA",
trim_ws = TRUE)
# PASO 4: Nos quedamos con las variables de estudio, eliminando valores nulos
# -----------------------------------------------------------------------------------
# HORAS DE SUEÑO y CALIDAD DEL SUEÑO
# guardamos la variable como tibble
tib.HSyCS <- datos %>% select(3,13) %>% filter(!is.na(3) & !is.na(13))
# pasamos las horas de sueño de segundos a horas
tib.HSyCS$HS <- tib.HSyCS$`Time asleep (seconds)` / 3600
tib.HSyCS <- tib.HSyCS %>% select(1,3)
# pasamos la calidad del sueño de char a numeric (viene en %)
tib.HSyCS$CS <- parse_number(tib.HSyCS$`Sleep Quality`)
tib.HSyCS <- tib.HSyCS %>% select(2,3)
# separamos las variables
tib.HS <- tib.HSyCS[1]
tib.CS <- tib.HSyCS[2]
# guardamos las variables como vectores
vec.HS <- ObtenerVector(tib.HS[1])
vec.CS <- ObtenerVector(tib.CS[1])
# guardamos las variables como dataframes
df.HS <- data.frame(HS = vec.HS)
df.CS <- data.frame(CS = vec.CS)
# tamaño de la muestra
n <- as.numeric(count(df.HS))
# PASO 5: Aplicamos la estadística descriptiva para analizar la variable HS
# -------------------------------------------------------------------------
# 5.1. Calculamos la tabla de frecuencias
# ---------------------------------------
# creamos los intervalos (del tipo '[a,b)') y calculamos sus f.a.
interv.HS <- hist(vec.HS, breaks = 'Sturges', include.lowest = TRUE, right = FALSE, plot = FALSE)
interv.HS <- interv.HS[1:2]
# creamos un vector que guarde los intervalos para luego representar la variable
vec.interv.HS <- interv.HS[[1]]
# metemos los datos en la tabla
# creamos una columna auxiliar para luego añadir las que nos interesan
tabla.freq.HS <- tibble(aux = 1:(length(interv.HS[[1]]) - 1))
# generamos los intervalos (las cadenas de caracteres) y las añadimos a la tabla
tabla.freq.HS <- CrearIntervalos(interv.HS[[1]], tabla.freq.HS)
# añadimos las f.a. que obtuvimos a la tabla
tabla.freq.HS <- ObtenerTibbleFA(interv.HS[[2]], tabla.freq.HS)
# eliminamos la columna auxiliar
tabla.freq.HS <- tabla.freq.HS %>% select(2,3)
# pasamos a tibble
tabla.freq.HS <- as_tibble(tabla.freq.HS)
# calculamos f.a.a.
freq.abs.acc.HS <- cumsum(tabla.freq.HS[2])
freq.abs.acc.HS <- rename(freq.abs.acc.HS, f.a.a. = f.a.)
# obtenemos vectores que necesitaremos
vec.fa.HS <- ObtenerVector(tabla.freq.HS[2])
vec.fr.HS <- FrecuenciasRelativas(vec.fa.HS)
# calculamos f.r.
freq.rel.HS <- tibble(aux = 1:(length(interv.HS[[1]]) - 1))
freq.rel.HS <- ObtenerTibbleFR(vec.fr.HS, freq.rel.HS)
freq.rel.HS <- freq.rel.HS %>% select(2)
freq.rel.HS <- as_tibble(freq.rel.HS)
# calculamos f.r.a.
freq.rel.acc.HS <- cumsum(freq.rel.HS)
freq.rel.acc.HS <- rename(freq.rel.acc.HS, f.r.a. = f.r.)
# terminamos tabla de frecuencias
tabla.freq.HS <- bind_cols(tabla.freq.HS, freq.abs.acc.HS, freq.rel.HS, freq.rel.acc.HS)
# 5.2. Calculamos las medidas de posición para HS
# -----------------------------------------------
# media
media.HS <-  mean(vec.HS)
# mediana (percentil 50%)
mediana.HS <- median(vec.HS)
# intervalo modal
max.freq.abs.HS <- max(vec.fa.HS)
interv.modal.HS <- tabla.freq.HS %>% select(1) %>% filter(tabla.freq.HS[2] == max.freq.abs.HS)
interv.modal.HS <- rename(interv.modal.HS, Moda = HS)
# percentil 25%
perc25.HS <- quantile(vec.HS, probs = 1/4)
# percentil 75%
perc75.HS <- quantile(vec.HS, probs = 3/4)
# 5.3. Calculamos las medidas de dispersión para HS
# -------------------------------------------------
# varianza
var.HS <- var(vec.HS)
# cuasivarianza
cuasivar.HS <- CalcularCuasivar(var.HS, n)
# desviación típica
desv.tip.HS <- sd(vec.HS)
# cuasidesviación típica
cuasidesv.tip.HS <- sqrt(cuasivar.HS)
# coeficiente de variación
coef.var.HS <- CalcularCoefVar(desv.tip.HS, media.HS)
# 5.4. Calculamos las medidas de forma para HS
# --------------------------------------------
# coeficiente de asimetría
coef.asim.HS <- skewness(vec.HS)
# coeficiente de kurtosis
coef.kurt.HS <- kurtosis(vec.HS)
# 5.5. Calculamos los gráficos correspondientes para HS
# -----------------------------------------------------
# histograma y polígono de frecuencias (f.a.)
hist.HS <- ggplot(df.HS, aes(vec.HS)) +
geom_histogram(color = 1, fill = "#005c00", breaks = vec.interv.HS) +
geom_freqpoly(data = df.HS, color = "#71c55b", breaks = vec.interv.HS) +
xlab("") +
ylab("") +
ggtitle("Histograma y polígono de frecuencias de las horas de sueño") +
ylim(c(0,400)) +
xlim(c(0, 13))
# polígono de frecuencias (f.r.a)
pol.fra.HS = ggplot(df.HS, aes(vec.HS)) +
geom_step(stat = "ecdf", color = "#71c55b", lwd = 1) +
xlab("") +
ylab("") +
ggtitle("Polígono de frecuencias f.r.a.")
tabla.freq.HS
max(vec.HS)
min(vec.HS)
mean(vec.HS)
mediana.HS
interv.modal.HS
var.HS
desv.tip.HS
cuasivar.HS
cuasidesv.tip.HS
coef.var.HS
coef.asim.HS
coef.kurt.HS
hist.HS
pol.fra.HS
View(datos)
hist(vec.CS, breaks = 'Sturges', include.lowest = TRUE, right = FALSE, plot = TRUE)
hist(vec.CS, breaks = 'Sturges', include.lowest = TRUE, right = FALSE, plot = FALSE)
tabla.freq.HS
# polígono de frecuencias (f.r.a)
pol.fra.HS = ggplot(df.HS, aes(vec.HS)) +
geom_step(stat = "ecdf", color = "#71c55b", lwd = 1) +
xlab("") +
ylab("") +
ggtitle("Polígono de frecuencias f.r.a.")
hist.HS
qqnorm(vec.HS)
qqline(vec.HS)
hist.HS
pol.fra.HS
