ggtitle("Polígono de frecuencias f.r.a.")
# TABLA DE FRECUENCIAS NEH Y GE
# tabla de frecuencias absolutas
tabla.freq.abs.NEHyGE <- table(vec.NEHyGE.NEH, vec.NEHyGE.GE = cut(vec.NEHyGE.GE, breaks = intervalos, right = FALSE))
# tabla de frecuencias relativas
tabla.freq.rel.NEHyGE <- prop.table(tabla.freq.abs.NEHyGE)
# añadimos marginales
tabla.freq.abs.NEHyGE <- addmargins(tabla.freq.abs.NEHyGE)
tabla.freq.rel.NEHyGE <- addmargins(tabla.freq.rel.NEHyGE)
# DIAGRAMA DE DISPERSIÓN NEH Y GE (NUBE DE PUNTOS)
diag.disp.NEHyGE <- ggplot(df.NEHyGE, aes(x = NEH, y = GE)) +
geom_point(color = "#71c55b") +
xlab("") +
ylab("")
# parece que no tienen una relación lineal, calculamos coef correlación
coef.cor.NEHyGE <- cor(vec.NEHyGE.NEH, vec.NEHyGE.GE)
# NUEVA VARIABLE (REGRESIÓN)
# TABLA DE FRECUENCIAS NPH Y NEH
# tabla de frecuencias absolutas
tabla.freq.abs.NPHyNEH <- table(vec.NPHyNEH.NPH, vec.NPHyNEH.NEH)
# tabla de frecuencias relativas
tabla.freq.rel.NPHyNEH <- prop.table(tabla.freq.abs.NPHyNEH)
# añadimos marginales
tabla.freq.abs.NPHyNEH <- addmargins(tabla.freq.abs.NPHyNEH)
tabla.freq.rel.NPHyNEH <- addmargins(tabla.freq.rel.NPHyNEH)
# DIAGRAMA DE DISPERSIÓN NPH Y NEH (NUBE DE PUNTOS)
diag.disp.NPHyNEH <- ggplot(df.NPHyNEH, aes(x = NPH, y = NEH)) +
geom_point(color = "#71c55b") +
xlab("") +
ylab("") +
ylim(c(0, 7)) +
ggtitle("Diagrama de dispersión Nº personas por hogar y Nº estudiantes por hogar")
# REGRESIÓN NPH Y NEH
reg.NPHyNEH <- lm(vec.NPHyNEH.NPH~vec.NPHyNEH.NEH, data = df.NPHyNEH)
reg.NPHyNEH <- summary(reg.NPHyNEH)
# guardamos resultados
a.NPHyNEH <- 2.622
b.NPHyNEH <- 0.637
# utilizamos regresión para predecir:
# y = 2.38759 + 0.66514x
# si viven 8 personas en un hogar, ¿cuántos serán estudiantes?
res <- a.NPHyNEH + b.NPHyNEH * 8
# covarianza
cov.NPHyNEH <- cov(vec.NPHyNEH.NPH, vec.NPHyNEH.NEH)
# coeficiente correlación lineal
coef.cor.NPHyNEH <- cor(vec.NPHyNEH.NPH, vec.NPHyNEH.NEH)
# coeficiente determinación
coef.det.NPHyNEH <- coef.cor.NPHyNEH ^ 2
# T2: PROBABILIDAD
# ----------------
# P(GE >= 1000) - Salario mínimo
c.fav.1 <- as.numeric(count(df.GE %>% filter(GE >= 1000)))
c.pos.1 <- n.GE
prob.1 <- c.fav.1 / c.pos.1
# P(GE >= 12000) - Salario mínimo x12
c.fav.2 <- as.numeric(count(df.GE %>% filter(GE >= 12000)))
c.pos.2 <- n.GE
prob.2 <- c.fav.2 / c.pos.2
# Dada la muestra de NEH, P de que al coger 3 hogares (sin remp) tengan
# 1,2 y 3 estudiantes
c.fav.3 <- choose(vec.fa.NEH[1], 1) * choose(vec.fa.NEH[2], 1) * choose(vec.fa.NEH[3], 1)
c.pos.3 <- choose(n.NEH, 3)
prob.3 <- c.fav.3 / c.pos.3
# Dada la muestra de NEH, P de que al coger 3 hogares (sin remp) tengan el mismo número
# de estudiantes
c.fav.4 <- SumaNumCombinatorios(vec.fa.NEH, 3)
c.pos.4 <- choose(n.NEH, 3)
prob.4 <- c.fav.4 / c.pos.4
# Calculamos la probabilidad de que en un hogar se gasten entre 1000 y 2000 (mediana = 1598)
# sabiendo que hay x estudiantes en ese hogar
prob.5 <- c()
for (i in 1:6)
prob.5 <- c(prob.5, ProbCondicionadaGE(df.NEHyGE, df.NEHyGE.NEH, i))
# nº de estudiantes por hogar más probable de tener un gasto promedio: 2
# Calculamos la probabilidad de que en un hogar promedio (2 estudiantes) haya un gasto
# en libros mayor de la media
# calculamos media GL
media.GL <- mean(vec.NEHyGL.GL)
# P(A/B)
prob.6 <- ProbCondicionadaGL(df.NEHyGL, df.NEHyGL.NEH)
# Calculamos la probabilidad de que NEH = i (i in 1:6) para obtener la función de masa
prob.7 <- c()
for  (i in 1:6)
prob.7 <- c(prob.7, ProbNEH(df.NEH, i))
# T3: VARIABLES ALEATORIAS Y MODELOS DE PROBABILIDAD
# --------------------------------------------------
# NEH: variable discreta --> FUNCIÓN DE MASA
func.mas.NEH <- function(x) {
return(prob.7[x])
}
# función de distribución
func.dist.NEH <- function(x) {
sum <- 0
for (i in 1:x)
sum <- sum + func.mas.NEH(i)
return(sum)
}
# GE: variable continua --> FUNCIÓN DE DENSIDAD
func.dens.GE <-  ggplot(df.GE, aes(x = GE)) +
geom_density(color = "#71c55b",
fill = "#71c55b",
alpha = 0.25,
lwd = 1) +
xlab("Gasto en educación") +
ylab("Densidad") +
ggtitle("Función de densidad del gasto en educación por hogar")
help
diag.disp.NEHyGE <- ggplot(df.NEHyGE, aes(x = NEH, y = GE)) +
geom_point(color = "#71c55b") +
xlab("") +
ylab("")
diag.disp.NEHyGE
# GE: variable continua --> FUNCIÓN DE DENSIDAD
func.dens.GE <-  ggplot(df.GE, aes(x = GE)) +
geom_density(color = "#71c55b",
fill = "#71c55b",
alpha = 0.25,
lwd = 1) +
xlab("Gasto en educación") +
ylab("Densidad") +
ggtitle("Función de densidad del gasto en educación por hogar")
func.dens.GE
library(readr)
sleepdata_2 <- read_csv("sleepdata_2.csv")
View(sleepdata_2)
library(readr)
sleepdata_2 <- read_delim("sleepdata_2.csv",
delim = ";", escape_double = FALSE, na = "NA",
trim_ws = TRUE)
View(sleepdata_2)
# PASO 1: Importamos las librerías necesarias
# -------------------------------------------
library(readr)
# PASO 2: Traducimos la información del fichero de datos (excel) "sleepdata_2.csv" a dataframe
# --------------------------------------------------------------------------------------------
datos <- read_delim("sleepdata_2.csv", +
delim = ";", escape_double = FALSE, na = "NA", +
trim_ws = TRUE)
# PASO 2: Traducimos la información del fichero de datos (excel) "sleepdata_2.csv" a dataframe
# --------------------------------------------------------------------------------------------
datos <- read_delim("sleepdata_2.csv"), +
delim = ";", escape_double = FALSE, na = "NA", +
trim_ws = TRUE
# PASO 2: Traducimos la información del fichero de datos (excel) "sleepdata_2.csv" a dataframe
# --------------------------------------------------------------------------------------------
datos <- read_delim("sleepdata_2.csv"),
delim = ";", escape_double = FALSE, na = "NA",
trim_ws = TRUE)
# PASO 2: Traducimos la información del fichero de datos (excel) "sleepdata_2.csv" a dataframe
# --------------------------------------------------------------------------------------------
datos <- read_delim("sleepdata_2.csv",
delim = ";", escape_double = FALSE, na = "NA",
trim_ws = TRUE)
problems()
# PASO 2: Traducimos la información del fichero de datos (excel) "sleepdata_2.csv" a dataframe
# --------------------------------------------------------------------------------------------
datos <- read_delim("sleepdata_2.csv",
delim = ";", escape_double = FALSE, na = "NA",
trim_ws = TRUE)
View(datos)
# PASO 1: Importamos las librerías necesarias
# -------------------------------------------
library(readr)
# PASO 2: Traducimos la información del fichero de datos (excel) "sleepdata_2.csv" a dataframe
# --------------------------------------------------------------------------------------------
datos <- read_delim("sleepdata_2.csv",
delim = ";", escape_double = FALSE, na = "NA",
trim_ws = TRUE)
datos
View(datos)
# dataframe de horas de sueño (HS)
horas.sueño <- datos %>% select(12) %>% filter(!is.na(12))
#####################################################################################
#
# TRABAJO FINAL DE ESTADÍSTICA APLICADA
#
# Curso 2021-22
# Autores: Beatriz Espinar Aragón
#          Steven Mallqui Aguilar
# DNIs: 51139183V
#       51750233A
#
# Nota:
# El contenido del fichero de datos, los pasos necesarios para obtener el dataframe
# y otra información relevante quedan explicados en la memoria del proyecto
#
#####################################################################################
# PASO 1: Importamos las librerías necesarias
# -------------------------------------------
library(readr)
library(dplyr)
library(janitor)
library(ggplot2)
library(fdth)
library(psych)
library(moments)
library(ggrepel)
library(tidyverse)
# PASO 2: Traducimos la información del fichero de datos (excel) "sleepdata_2.csv" a dataframe
# --------------------------------------------------------------------------------------------
datos <- read_delim("sleepdata_2.csv",
delim = ";", escape_double = FALSE, na = "NA",
trim_ws = TRUE)
# PASO 3: Nos quedamos con la variable principal de estudio, eliminando valores nulos
# -----------------------------------------------------------------------------------
# dataframe de horas de sueño (HS)
horas.sueño <- datos %>% select(12) %>% filter(!is.na(12))
# dataframe de horas de sueño (HS)
horas.suenyo <- datos %>% select(12) %>% filter(!is.na(12))
horas.suenyo
# dataframe de horas de sueño (HS)
horas.suenyo <- datos %>% select(12) %>% filter(!is.na(12))
horas.suenyo$HS <- horas.suenyo$`Time in bed (seconds)` / 3600
horas.suenyo <- horas.suenyo %>% select(2)
horas.suenyoç
horas.suenyo
ggplot(horas.suenyo, aes(x = HS)) +
geom_density(color = "#71c55b",
fill = "#71c55b",
alpha = 0.25,
lwd = 1) +
xlab("Horas de sueño") +
ylab("Densidad") +
ggtitle("Función de densidad del gasto en educación por hogar")
ObtenerVector <- function(tib) {
for (i in tib)
vec <- i
return(vec)
}
tib.HS <- as_tibble(horas.suenyo)
vec.HS <- ObtenerVector(tib.HS[1])
qqnorm(vec.HS)
qqline(vec.HS)
shapiro.test(vec.HS)
car::qqplot(vec.HS)
qqplot(vec.HS)
qqplots(vec.HS)
qqnorm(vec.HS)
ggplot(horas.suenyo, aes(x = HS)) +
geom_density(color = "#71c55b",
fill = "#71c55b",
alpha = 0.25,
lwd = 1) +
xlab("Horas de sueño") +
ylab("Densidad") +
ggtitle("Función de densidad del gasto en educación por hogar")
View(horas.suenyo)
# guardamos la variable como dataframe
df.HS <- datos %>% select(12) %>% filter(!is.na(12))
# pasamos de segundos a horas
df.HS$HS <- df.HS$`Time in bed (seconds)` / 3600
df.HS <- df.HS %>% select(2)
# guardamos la variable como tibble
tib.HS <- as_tibble(df.HS)
# guardamos la variable como vector
vec.HS <- ObtenerVector(tib.HS)
# tamaño de la muestra
n.HS <- as.numeric(count(df.HS))
# guardamos la variable como dataframe
df.HSyCS <- datos %>% select(3,12) %>% filter(!is.na(3) & !is.na(12))
df.HSyCS.CS <- df.HSyCS %>% select(1)
# pasamos la calidad de sueño de char a numeric
df.HSyCS.CS$CS <- as.numeric(df.HSyCS.CS$`Sleep quality`)
df.HSyCS.CS <- df.HSyCS.CS %>% select(2)
df.HSyCS
df.HS
# PASO 3: Traducimos la información del fichero de datos (excel) "sleepdata_2.csv" a dataframe
# --------------------------------------------------------------------------------------------
datos <- read_delim("sleepdata_2.csv",
delim = ";", escape_double = FALSE, na = "NA",
trim_ws = TRUE)
# guardamos la variable como tibble
tib.HS <- datos %>% select(12) %>% filter(!is.na(12))
# pasamos de segundos a horas
tib.HS$HS <- tib.HS$`Time in bed (seconds)` / 3600
tib.HS <- tib.HS %>% select(2)
# guardamos la variable como vector
vec.HS <- ObtenerVector(tib.HS)
# guardamos la variable como dataframe
df.HS <- data.frame(HS = vec.HS)
# tamaño de la muestra
n.HS <- as.numeric(count(df.HS))
# guardamos la variable como dataframe
tib.HSyCS <- datos %>% select(3,12) %>% filter(!is.na(3) & !is.na(12))
tib.HSyCS.CS <- tib.HSyCS %>% select(1)
# pasamos la calidad de sueño de char a numeric
tib.HSyCS.CS$CS <- as.numeric(tib.HSyCS.CS$`Sleep quality`)
tib.HSyCS
# pasamos la calidad de sueño de char a numeric
tib.HSyCS.CS$CS <- parse_number(tib.HSyCS.CS$`Sleep quality`)
tib.HSyCS.CS
# PASO 3: Traducimos la información del fichero de datos (excel) "sleepdata_2.csv" a dataframe
# --------------------------------------------------------------------------------------------
datos <- read_delim("sleepdata_2.csv",
delim = ";", escape_double = FALSE, na = "NA",
trim_ws = TRUE)
# guardamos la variable como tibble
tib.HS <- datos %>% select(12) %>% filter(!is.na(12))
# cambiamos el nombre de la columna
tib.HS <- rename(tib.HS, HS = `Time in bed (seconds)`)
# pasamos de segundos a horas
tib.HS <- tib.HS[1] / 3600
tib.HS
class(datos)
class(tib.HS)
# guardamos la variable como tibble
df.HS <- datos %>% select(12) %>% filter(!is.na(12))
# cambiamos el nombre de la columna
df.HS <- rename(df.HS, HS = `Time in bed (seconds)`)
# pasamos de segundos a horas
df.HS <- df.HS[1] / 3600
# guardamos la variable como dataframe
df.HS <- datos %>% select(12) %>% filter(!is.na(12))
# cambiamos el nombre de la columna
df.HS <- rename(df.HS, HS = `Time in bed (seconds)`)
# pasamos de segundos a horas
df.HS <- df.HS[1] / 3600
# guardamos la variable como tibble
tib.HS <- as_tibble(df.HS)
# guardamos la variable como vector
vec.HS <- ObtenerVector(tib.HS[1])
# tamaño de la muestra
n.HS <- as.numeric(count(df.HS))
# guardamos la variable como dataframe
df.CSyHS <- datos %>% select(3,12) %>% filter(!is.na(3) & !is.na(12))
# cambiamos el nombre de las columnas
df.CSyHS <- rename(df.CSyHS, CS = `Sleep Quality`, HS = `Time in bed (seconds)`)
# pasamos de segundos a horas
df.CSyHS <- df.CSyHS[1] / 3600
# pasamos de segundos a horas
df.CSyHS <- df.CSyHS[2] / 3600
df.CSyHS
# guardamos la variable como dataframe
df.CSyHS <- datos %>% select(3,12) %>% filter(!is.na(3) & !is.na(12))
# cambiamos el nombre de las columnas
df.CSyHS <- rename(df.CSyHS, CS = `Sleep Quality`, HS = `Time in bed (seconds)`)
df.CSyHS
# guardamos la variable como dataframe
df.HS <- datos %>% select(13) %>% filter(!is.na(13))
# cambiamos el nombre de la columna
df.HS <- rename(df.HS, HS = `Time asleep (seconds)`)
# pasamos de segundos a horas
df.HS <- df.HS[1] / 3600
# guardamos la variable como tibble
tib.HS <- as_tibble(df.HS)
# guardamos la variable como vector
vec.HS <- ObtenerVector(tib.HS[1])
# tamaño de la muestra
n.HS <- as.numeric(count(df.HS))
df.HS
tib.HS
vec.HS
n.HS
# guardamos la variable como dataframe
df.CSyHS <- datos %>% select(3,13) %>% filter(!is.na(3) & !is.na(13))
# pasamos las horas de sueño de segundos a horas
df.CSyHS$HS <- df.CSyHS$`Time asleep (seconds)` / 3600
df.CSyHS
df.CSyHS <- df.CSyHS %>% select(1,3)
df.CSyHS
# guardamos la variable como dataframe
df.HSyCS <- datos %>% select(3,13) %>% filter(!is.na(3) & !is.na(13))
# pasamos las horas de sueño de segundos a horas
df.HSyCS$HS <- df.HSyCS$`Time asleep (seconds)` / 3600
df.HSyCS <- df.HSyCS %>% select(1,3)
# pasamos la calidad del sueño de char a numeric (viene en %)
df.HSyCS$CS <- parse_number(df.HSyCS$`Sleep Quality`)
df.HSyCS
df.HSyCS <- df.HSyCS %>% select(2,3)
df.HSyCS
df.HSyCS <- datos %>% select(3,13) %>% filter(!is.na(3) & !is.na(13))
# pasamos las horas de sueño de segundos a horas
df.HSyCS$HS <- df.HSyCS$`Time asleep (seconds)` / 3600
df.HSyCS <- df.HSyCS %>% select(1,3)
# pasamos la calidad del sueño de char a numeric (viene en %)
df.HSyCS$CS <- parse_number(df.HSyCS$`Sleep Quality`)
df.HSyCS <- df.HSyCS %>% select(2,3)
class(df.HSyCS)
df.HSyCS
View(df.HSyCS)
df.HS <- datos %>% select(13) %>% filter(!is.na(13))
# cambiamos el nombre de la columna
df.HS <- rename(df.HS, HS = `Time asleep (seconds)`)
# pasamos de segundos a horas
df.HS <- df.HS[1] / 3600
# guardamos la variable como tibble
tib.HS <- as_tibble(df.HS)
# guardamos la variable como vector
vec.HS <- ObtenerVector(tib.HS[1])
# tamaño de la muestra
n.HS <- as.numeric(count(df.HS))
# HORAS DE SUEÑO y CALIDAD DEL SUEÑO
# guardamos la variable como dataframe
tib.HSyCS <- datos %>% select(3,13) %>% filter(!is.na(3) & !is.na(13))
# pasamos las horas de sueño de segundos a horas
tib.HSyCS$HS <- tib.HSyCS$`Time asleep (seconds)` / 3600
tib.HSyCS <- tib.HSyCS %>% select(1,3)
# pasamos la calidad del sueño de char a numeric (viene en %)
tib.HSyCS$CS <- parse_number(tib.HSyCS$`Sleep Quality`)
tib.HSyCS <- tib.HSyCS %>% select(2,3)
tib.HSyCS
df.HS
tib.HSyCS
# separamos las variables
tib.HSyCS.HS <- tib.HSyCS[1]
tib.HSyCS.CS <- tib.HSyCS[2]
tib.HSyCS.HS
tib.HSyCS.CS
# guardamos las variables como dataframes
df.HSyCS.HS <- data.frame(HS = vec.HSyCS.HS)
df.HSyCS.CS <- data.frame(CS = vec.HSyCS.CS)
# guardamos las variables como vectores
vec.HSyCS.HS <- ObtenerVector(tib.HSyCS.HS[1])
vec.HSyCS.CS <- ObtenerVector(tib.HSyCS.CS[1])
# guardamos las variables como dataframes
df.HSyCS.HS <- data.frame(HS = vec.HSyCS.HS)
df.HSyCS.CS <- data.frame(CS = vec.HSyCS.CS)
# tamaño de las muestras
n.HSyCS <- as.numeric(count(df.HSyCS.HS))
n.HSyCS
tib.HSyCS <- datos %>% select(3,13) %>% filter(!is.na(3) & !is.na(13))
# pasamos las horas de sueño de segundos a horas
tib.HSyCS$HS <- tib.HSyCS$`Time asleep (seconds)` / 3600
tib.HSyCS <- tib.HSyCS %>% select(1,3)
# pasamos la calidad del sueño de char a numeric (viene en %)
tib.HSyCS$CS <- parse_number(tib.HSyCS$`Sleep Quality`)
tib.HSyCS <- tib.HSyCS %>% select(2,3)
# separamos las variables
tib.HS <- tib.HSyCS[1]
tib.CS <- tib.HSyCS[2]
# guardamos las variables como vectores
vec.HS <- ObtenerVector(tib.HS[1])
vec.CS <- ObtenerVector(tib.CS[1])
# guardamos las variables como dataframes
df.HS <- data.frame(HS = vec.HS)
df.CS <- data.frame(CS = vec.CS)
# tamaño de la muestra
n <- as.numeric(count(df.HS))
qqnorm(vec.HS)
qqline(vec.HS)
qqPlot(vec.HS)
car::qqPlot(vec.HS)
library(car)
install.packages(car)
install.packages("car")
library(car)
source("~/Desktop/Git-EA/Proyecto_EA.R")
car::qqPlot(vec.HS)
library(car)
#####################################################################################
#
# TRABAJO FINAL DE ESTADÍSTICA APLICADA
#
# Curso 2021-22
# Autores: Beatriz Espinar Aragón
#          Steven Mallqui Aguilar
# DNIs: 51139183V
#       51750233A
#
# Nota:
# El contenido del fichero de datos, los pasos necesarios para obtener el dataframe
# y otra información relevante quedan explicados en la memoria del proyecto
#
#####################################################################################
# PASO 1: Importamos las librerías necesarias
# -------------------------------------------
library(readr)
library(dplyr)
library(janitor)
library(ggplot2)
library(fdth)
library(psych)
library(moments)
library(ggrepel)
library(tidyverse)
library(car)
# PASO 2: Codificamos las funciones que vamos a utilizar
# ------------------------------------------------------
# devuelve un vector con el contenido de un tibble
ObtenerVector <- function(tib) {
for (i in tib)
vec <- i
return(vec)
}
# PASO 3: Traducimos la información del fichero de datos (excel) "sleepdata_2.csv" a dataframe
# --------------------------------------------------------------------------------------------
datos <- read_delim("sleepdata_2.csv",
delim = ";", escape_double = FALSE, na = "NA",
trim_ws = TRUE)
# PASO 4: Nos quedamos con las variables de estudio, eliminando valores nulos
# -----------------------------------------------------------------------------------
# HORAS DE SUEÑO y CALIDAD DEL SUEÑO
# guardamos la variable como dataframe
tib.HSyCS <- datos %>% select(3,13) %>% filter(!is.na(3) & !is.na(13))
# pasamos las horas de sueño de segundos a horas
tib.HSyCS$HS <- tib.HSyCS$`Time asleep (seconds)` / 3600
tib.HSyCS <- tib.HSyCS %>% select(1,3)
# pasamos la calidad del sueño de char a numeric (viene en %)
tib.HSyCS$CS <- parse_number(tib.HSyCS$`Sleep Quality`)
tib.HSyCS <- tib.HSyCS %>% select(2,3)
# separamos las variables
tib.HS <- tib.HSyCS[1]
tib.CS <- tib.HSyCS[2]
# guardamos las variables como vectores
vec.HS <- ObtenerVector(tib.HS[1])
vec.CS <- ObtenerVector(tib.CS[1])
# guardamos las variables como dataframes
df.HS <- data.frame(HS = vec.HS)
df.CS <- data.frame(CS = vec.CS)
# tamaño de la muestra
n <- as.numeric(count(df.HS))
car::qqPlot(vec.HS)
