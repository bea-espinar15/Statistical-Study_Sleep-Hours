aux
aux <- datos %>% filter(GE >= 0 & GE < 2500)
aux
intervalos <- c(0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 25000, 55000)
intervalos.GE <- hist(vector.GE, breaks = intervalos, include.lowest = TRUE, right = TRUE, plot = FALSE)
intervalos.GE <- intervalos.GE[1:2]
intervalos.GE
intervalos <- c(0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 10000, 20000, 30000, 40000, 55000)
intervalos.GE <- hist(vector.GE, breaks = intervalos, include.lowest = TRUE, right = TRUE, plot = FALSE)
intervalos.GE <- intervalos.GE[1:2]
intervalos.GE
intervalos <- c(0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 20000, 30000, 55000)
intervalos.GE <- hist(vector.GE, breaks = intervalos, include.lowest = TRUE, right = TRUE, plot = FALSE)
intervalos.GE <- intervalos.GE[1:2]
intervalos.GE
intervalos <- c(0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 15000, 20000, 30000, 55000)
intervalos.GE <- hist(vector.GE, breaks = intervalos, include.lowest = TRUE, right = TRUE, plot = FALSE)
intervalos.GE <- intervalos.GE[1:2]
intervalos.GE
# metemos los datos en la tabla
tabla.freq.GE <- tibble(aux = 1:(length(intervalos.GE[[1]]) - 1))
tabla.freq.GE <- CrearIntervalos(intervalos.GE[[1]], tabla.freq.GE)
tabla.freq.GE <- ObtenerTibble(intervalos.GE[[2]], tabla.freq.GE)
tabla.freq.GE <- tabla.freq.GE %>% select(2,3)
tabla.freq.GE <- as_tibble(tabla.freq.GE)
tabla.freq.GE
# devuelve el número x con k decimales
EspecificarDecimal <- function(x, k) round(x, k)
# frecuencia rel
freq.rel.GE <- tabla.freq.GE %>% summarise(f.r. = EspecificarDecimal(n() / n.total, 9))
freq.rel.GE
# frecuencia rel
freq.rel.GE <- tabla.freq.GE %>% group_by(GE) %>% summarise(f.r. = EspecificarDecimal(n() / n.total, 9))
freq.rel.GE
n.total
tabla.freq.GE
# frecuencia rel
freq.rel.GE <- tabla.freq.GE %>% group_by(GE) %>% summarise(f.r. = EspecificarDecimal(f.a. / n.total, 9))
freq.rel.GE
intervalos.GE
# creamos intervalos y frecuencias abs
vector.GE <- ObtenerVector(gasto.ed)
intervalos <- c(0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 15000, 20000, 30000, 55000)
intervalos.GE <- hist(vector.GE, breaks = intervalos, include.lowest = TRUE, right = TRUE, plot = FALSE)
intervalos.GE <- intervalos.GE[1:2]
# metemos los datos en la tabla
tabla.freq.GE <- tibble(aux = 1:(length(intervalos.GE[[1]]) - 1))
tabla.freq.GE <- CrearIntervalos(intervalos.GE[[1]], tabla.freq.GE)
tabla.freq.GE <- ObtenerTibble(intervalos.GE[[2]], tabla.freq.GE)
tabla.freq.GE <- tabla.freq.GE %>% select(2,3)
tabla.freq.GE <- as_tibble(tabla.freq.GE)
# frecuencias abs acumuladas
freq.abs.acc.GE <- cumsum(tabla.freq.GE[2])
freq.abs.acc.GE <- rename(freq.abs.acc.GE, f.a.a. = f.a.)
# frecuencia rel
freq.rel.GE <- tabla.freq.GE %>% group_by(GE) %>% summarise(f.r. = EspecificarDecimal(f.a. / n.total, 9))
freq.rel.GE
# metemos los datos en la tabla
tabla.freq.GE <- tibble(aux = 1:(length(intervalos.GE[[1]]) - 1))
tabla.freq.GE
tabla.freq.GE <- CrearIntervalos(intervalos.GE[[1]], tabla.freq.GE)
tabla.freq.GE
tabla.freq.GE <- ObtenerTibble(intervalos.GE[[2]], tabla.freq.GE)
tabla.freq.GE
tabla.freq.GE <- tabla.freq.GE %>% select(2,3)
tabla.freq.GE <- as_tibble(tabla.freq.GE)
tabla.freq.GE
# frecuencias abs acumuladas
freq.abs.acc.GE <- cumsum(tabla.freq.GE[2])
freq.abs.acc.GE <- rename(freq.abs.acc.GE, f.a.a. = f.a.)
freq.abs-
freq.abs.acc.GE
freq.abs.acc.GE
# frecuencia rel
freq.rel.GE <- tabla.freq.GE %>% group_by(GE) %>% summarise(f.r. = EspecificarDecimal(f.a. / n.total, 9))
freq.rel.GE
# frecuencia rel
freq.rel.GE <- summarise(f.r. = EspecificarDecimal(tabla.freq.GE[2] / n.total, 9))
# frecuencia rel
vector.fa.GE <- ObtenerVector(freq.abs.GE[2])
vector.fa.GE
# frecuencia rel
vector.fa.GE <- ObtenerVector(tabla.freq.GE[2])
vector.fa.GE
vector.fr.GE <- vector.fa.GE / n.total
vector.fr.GE
# calcula las frecuencias relativas
FrecuenciasRelativas <- function(vec_abs) {
rel <- c()
for (i in vec_abs)
rel <- i / n.total
return(rel)
}
vector.fr.GE <- FrecuenciasRelativas(vector.fa.GE)
vector.fr.GE
vector.fa.GE
# calcula las frecuencias relativas
FrecuenciasRelativas <- function(vec_abs) {
rel <- c()
for (i in 1:length(vec_abs))
rel <- EspecificarDecimal(vec_abs[i] / n.total, 9)
return(rel)
}
# frecuencia rel
vector.fa.GE <- ObtenerVector(tabla.freq.GE[2])
vector.fr.GE <- FrecuenciasRelativas(vector.fa.GE)
vector.fr.GE
# calcula las frecuencias relativas
FrecuenciasRelativas <- function(vec_abs) {
rel <- c()
for (i in 1:length(vec_abs))
rel <- c(EspecificarDecimal(vec_abs[i] / n.total, 9))
return(rel)
}
vector.fr.GE <- FrecuenciasRelativas(vector.fa.GE)
vector.fr.GE
# calcula las frecuencias relativas
FrecuenciasRelativas <- function(vec_abs) {
rel <- c()
for (i in 1:length(vec_abs))
rel <- c(rel, EspecificarDecimal(vec_abs[i] / n.total, 9))
return(rel)
}
vector.fr.GE <- FrecuenciasRelativas(vector.fa.GE)
vector.fr.GE
freq.rel.GE <- ObtenerTibble(vector.fr.GE, freq.rel.GE)
freq.rel.GE
freq.rel.GE <- tibble(aux = 1:(length(intervalos.GE[[1]]) - 1))
freq.rel.GE
# mete los datos del vector en un tibble que crea
ObtenerTibbleFR <- function(vec, tib) {
tib <- cbind(tib, 'f.r.' = vec)
return(tib)
}
freq.rel.GE <- tibble(aux = 1:(length(intervalos.GE[[1]]) - 1))
freq.rel.GE <- ObtenerTibbleFR(vector.fr.GE, freq.rel.GE)
freq.rel.GE
vector.fr.GE
vec_abs
tabla.freq.GE[2]
vector.fr.GE
vector.fa.GE
length(vec_abs)
length(vector.fa.GE)
rel <- c()
rel
class(rel)
rel <- c(rel, EspecificarDecimal(vector.fa.GE[1] / n.total, 9))
rel
rel <- c(rel, EspecificarDecimal(vector.fa.GE[2] / n.total, 9))
rel
rel <- c(rel, vec_abs[i] / n.total)
rel <- c(rel, vector.fa.GE[2] / n.total)
rel
class(rel)
rel <- c()
class(rel)
rel <- EspecificarDecimal(vector.fa.GE[1] / n.total, 9)
rel
rel
class(rel)
rel <- c()
rel <- vector.fa.GE[1] / n.total
rel
class(rel)
rel <- c(rel, vector.fa.GE[2] / n.total)
rel
rel <- as.numeric(vec_abs[1] / n.total)
rel <- as.numeric(vector.fa.GE[1] / n.total)
rel
# calcula las frecuencias relativas
FrecuenciasRelativas <- function(vec_abs) {
rel <- as.numeric(vec_abs[1] / n.total)
for (i in 1:length(vec_abs))
rel <- c(rel, as.numeric(vec_abs[i] / n.total))
return(rel)
}
# frecuencia rel
vector.fa.GE <- ObtenerVector(tabla.freq.GE[2])
vector.fr.GE <- FrecuenciasRelativas(vector.fa.GE)
vector.fr.GE
freq.rel.GE <- tibble(aux = 1:(length(intervalos.GE[[1]]) - 1))
freq.rel.GE <- ObtenerTibbleFR(vector.fr.GE, freq.rel.GE)
FrecuenciasRelativas <- function(vec_abs) {
for (i in 1:length(vec_abs))
rel <- c(rel, as.numeric(vec_abs[i] / n.total))
return(rel)
}
# frecuencia rel
vector.fa.GE <- ObtenerVector(tabla.freq.GE[2])
vector.fr.GE <- FrecuenciasRelativas(vector.fa.GE)
freq.rel.GE <- tibble(aux = 1:(length(intervalos.GE[[1]]) - 1))
freq.rel.GE <- ObtenerTibbleFR(vector.fr.GE, freq.rel.GE)
vector.fr.GE
vector.fa.GE
length(vector.fa.EG)
lenght(vector.fa.GE)
length(vector.fa.GE)
length(vector.fr.GE)
# calcula las frecuencias relativas
FrecuenciasRelativas <- function(vec_abs) {
for (i in 1:length(vec_abs))
rel <- c(rel, as.numeric(vec_abs[i] / n.total))
return(rel)
}
vector.fr.GE <- FrecuenciasRelativas(vector.fa.GE)
vector.fr.GE
# calcula las frecuencias relativas
FrecuenciasRelativas <- function(vec_abs) {
rel <- c()
for (i in 1:length(vec_abs))
rel <- c(rel, as.numeric(vec_abs[i] / n.total))
return(rel)
}
vector.fr.GE <- FrecuenciasRelativas(vector.fa.GE)
vector.fr.GE
freq.rel.GE <- tibble(aux = 1:(length(intervalos.GE[[1]]) - 1))
freq.rel.GE <- ObtenerTibbleFR(vector.fr.GE, freq.rel.GE)
freq.rel.GE
intervalos.GE
freq.rel.GE <- freq.rel.GE %>% select(2)
freq.rel.GE <- as_tibble(freq.rel.GE)
freq.rel.GE
# frecuencias rel acumuladas
freq.rel.acc.GE <- cumsum(freq.rel.GE)
freq.rel.acc.GE
freq.rel.acc.GE <- rename(freq.rel.acc.GE, f.r.a. = f.r.)
tabla.freq.GE
# terminamos tabla de frecuencias
tabla.freq.GE <- bind_cols(tabla.freq.GE, freq.abs.acc.GE, freq.rel.GE, freq.rel.acc.GE)
tabla.freq.GE
tabla.freq.NEH
# declaramos variable del dataframe
datos <- fichero_salida
datos
# rm todas las col exc la 2 (ID), la 5 (NEH) y la 57 (GE) y las filas que sean NA
datos <- datos %>% select(2,5,57) %>% filter(!is.na(EHOGAR) & !is.na(GTT))
library(dplyr)
library(janitor)
library(ggplot2)
library(fdth)
library(psych)
# declaramos variable del dataframe
datos <- fichero_salida
# rm todas las col exc la 2 (ID), la 5 (NEH) y la 57 (GE) y las filas que sean NA
datos <- datos %>% select(2,5,57) %>% filter(!is.na(EHOGAR) & !is.na(GTT))
datos
# pasamos EHOGAR de char a numeric
datos$NEH <- as.numeric(datos$EHOGAR)
datos
datos <- datos %>% select(1,3,4)
datos
# rehacemos el fichero con los gastos totales por hogar
# (viene una entrada por cada estudiante)
datos <- datos %>% group_by(IDHOGAR, NEH) %>% summarise(GE = sum(GTT))
datos <- datos %>% ungroup() %>% select(2, 3)
datos
# separamos en dos variables
num.est.hogar <- datos %>% select(1)
gasto.ed <- datos %>% select(2)
num.est.hogar
gasto.ed
# número de datos del fichero
n.total <- count(datos)
n.total
# frecuencias abs
freq.abs.NEH <- table(num.est.hogar)
freq.abs.NEH
# frecuencias rel
freq.rel.NEH <- prop.table(freq.abs.NEH)
freq.rel.NEH
# pasamos a tibble
freq.abs.NEH <- as_tibble(freq.abs.NEH)
freq.abs.NEH <- rename(freq.abs.NEH, NEH = num.est.hogar, f.a. = n)
freq.rel.NEH <- as_tibble(freq.rel.NEH)
freq.rel.NEH <- rename(freq.rel.NEH, NEH = num.est.hogar, f.r. = n)
freq.abs.NEH
freq.rel.NEH
# frecuencias acumuladas
freq.abs.acc.NEH <- cumsum(freq.abs.NEH[2])
freq.abs.acc.NEH <- rename(freq.abs.acc.NEH, f.a.a. = f.a.)
freq.rel.acc.NEH <- cumsum(freq.rel.NEH[2])
freq.rel.acc.NEH <- rename(freq.rel.acc.NEH, f.r.a. = f.r.)
freq.abs.acc.NEH
freq.rel.acc.NEH
# creamos tabla de frecuencias
NEH.aux <- num.est.hogar %>% group_by(NEH) %>% summarise(aux = 0)
NEH.aux
freq.NEH.aux <- bind_cols(freq.abs.NEH[2], freq.abs.acc.NEH, freq.rel.NEH[2], freq.rel.acc.NEH)
freq.NEH.aux
tabla.freq.NEH <- bind_cols(NEH.aux[1], freq.NEH.aux)
tabla.freq.NEH
# creamos intervalos y frecuencias abs
vector.GE <- ObtenerVector(gasto.ed)
vector.GE
intervalos <- c(0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 15000, 20000, 30000, 55000)
intervalos
intervalos.GE <- hist(vector.GE, breaks = intervalos, include.lowest = TRUE, right = TRUE, plot = FALSE)
intervalos.GE
intervalos.GE <- hist(vector.GE, breaks = intervalos, include.lowest = TRUE, right = TRUE, plot = TRUE)
intervalos.GE <- hist(vector.GE, breaks = 'Sturges', include.lowest = TRUE, right = TRUE, plot = FALSE)
intervalos.GE <- hist(vector.GE, breaks = 'Sturges', include.lowest = TRUE, right = TRUE, plot = TRUE)
intervalos.GE
intervalos.GE <- hist(vector.GE, breaks = intervalos, include.lowest = TRUE, right = TRUE, plot = TRUE)
intervalos.GE <- intervalos.GE[1:2]
intervalos.GE
# metemos los datos en la tabla
tabla.freq.GE <- tibble(aux = 1:(length(intervalos.GE[[1]]) - 1))
tabla.freq.GE
tabla.freq.GE <- CrearIntervalos(intervalos.GE[[1]], tabla.freq.GE)
tabla.freq.GE
tabla.freq.GE <- ObtenerTibbleFA(intervalos.GE[[2]], tabla.freq.GE)
# devuelve un vector con el contenido de un tibble
ObtenerVector <- function(tib) {
for (i in tib)
vec <- i
return(vec)
}
# Añade a un tibble una columna con los intervalos indicados
CrearIntervalos <- function(vec, tib) {
interv <- c()
for (i in 1:(length(vec) - 1))
interv <- c(interv, paste('(', vec[i], ', ', vec[i + 1], ']', sep = ''))
# metemos los intervalos en el tibble
tib <- cbind(tib, 'GE' = interv)
return(tib)
}
# mete los datos del vector en una nueva columna del tibble
ObtenerTibbleFA <- function(vec, tib) {
tib <- cbind(tib, 'f.a.' = vec)
return(tib)
}
# calcula las frecuencias relativas
FrecuenciasRelativas <- function(vec_abs) {
rel <- c()
for (i in 1:length(vec_abs))
rel <- c(rel, as.numeric(vec_abs[i] / n.total))
return(rel)
}
# mete los datos del vector en un tibble que crea
ObtenerTibbleFR <- function(vec, tib) {
tib <- cbind(tib, 'f.r.' = vec)
return(tib)
}
tabla.freq.GE <- ObtenerTibbleFA(intervalos.GE[[2]], tabla.freq.GE)
tabla.freq.GE
tabla.freq.GE <- tabla.freq.GE %>% select(2,3)
tabla.freq.GE <- as_tibble(tabla.freq.GE)
tabla.freq.GE
# frecuencias abs acumuladas
freq.abs.acc.GE <- cumsum(tabla.freq.GE[2])
freq.abs.acc.GE <- rename(freq.abs.acc.GE, f.a.a. = f.a.)
freq.abs.acc.GE
# frecuencias rel
vector.fa.GE <- ObtenerVector(tabla.freq.GE[2])
vector.fa.GE
vector.fr.GE <- FrecuenciasRelativas(vector.fa.GE)
vector.fr.GE
freq.rel.GE <- tibble(aux = 1:(length(intervalos.GE[[1]]) - 1))
freq.rel.GE
freq.rel.GE <- ObtenerTibbleFR(vector.fr.GE, freq.rel.GE)
freq.rel.GE
freq.rel.GE <- freq.rel.GE %>% select(2)
freq.rel.GE
freq.rel.GE <- as_tibble(freq.rel.GE)
freq.rel.GE
# frecuencias rel acumuladas
freq.rel.acc.GE <- cumsum(freq.rel.GE)
freq.rel.acc.GE <- rename(freq.rel.acc.GE, f.r.a. = f.r.)
freq.rel.acc.GE
tabla.freq.GE
# terminamos tabla de frecuencias
tabla.freq.GE <- bind_cols(tabla.freq.GE, freq.abs.acc.GE, freq.rel.GE, freq.rel.acc.GE)
tabla.freq.GE
tabla.freq.NEH
# media NEH
mean(num.est.hogar)
num.est.hogar
# media NEH
mean(num.est.hogar[1])
# media NEH
vector.NEH <- ObtenerVector(num.est.hogar)
mean(vector.NEH)
media.NEH <- mean(vector.NEH)
# mediana NEH
mediana.NEH <- median(vector.NEH)
mediana.NEH
CalcularModa <- function(v) {
which.max(tabulate(v))
}
# moda NEH
moda.NEH <- CalcularModa(vector.NEH)
moda.NEH
intervalos
intervalos.GE[1]
CalcularMarcasClase <- function(v){
mc <- c()
for (i in 1:(length(v) - 1))
mc <- c(mc, (v[i] + v[i + 1]) / 2)
return(mc)
}
# media GE
marcas.clase <- CalcularMarcasClase(intervalos.GE[[1]])
marcas.clase
intervalos.GE
vector.fa.GE
vector.fr.GE
# calcula la media (cuando hay intervalos)
CalcularMedia <- function(mc, fr) {
for (i in 1:length(fr))
media <- media + (mc[i] * fr[i])
return(media)
}
media.GE <- CalcularMedia(marcas.clase, vector.fr.GE)
# calcula la media (cuando hay intervalos)
CalcularMedia <- function(mc, fr) {
media <- 0
for (i in 1:length(fr))
media <- media + (mc[i] * fr[i])
return(media)
}
media.GE <- CalcularMedia(marcas.clase, vector.fr.GE)
media.GE
media.GE <- mean(vector.GE)
media.GE
# mediana GE
mediana.GE <- median(vector.GE)
mediana.GE
# intervalo modal GE
max.freq.abs.GE <- max(vector.fa.GE)
max.freq.abs.GE
intervalo.modal.GE <- tabla.freq.GE <- select(1) <- filter(f.a. = max.freq.abs.GE)
intervalo.modal.GE <- tabla.freq.GE <- select(1) <- filter(tabla.freq.GE[2] = max.freq.abs.GE)
intervalo.modal.GE <- tabla.freq.GE <- select(1) <- filter(tabla.freq.GE[2] == max.freq.abs.GE)
intervalo.modal.GE <- tabla.freq.GE <- select(1) <- filter(f.a. == max.freq.abs.GE)
intervalo.modal.GE <- tabla.freq.GE %>% select(1) %>% filter(f.a. == max.freq.abs.GE)
intervalo.modal.GE <- tabla.freq.GE %>% select(1) %>% filter(tabla.freq.GE[2] == max.freq.abs.GE)
intervalo.modal.GE
intervalo.modal.GE <- rename(intervalo.modal.GE, GE = Intervalo Modal)
intervalo.modal.GE <- rename(intervalo.modal.GE, GE = Moda)
intervalo.modal.GE <- rename(intervalo.modal.GE, Moda = GE)
intervalo.modal.GE
# percentil 25% NEH
perc25.NEH <- quantile(vector.NEH, probs = 1/4)
# percentil 75% NEH
perc75.NEH <- quantile(vector.NEH, probs = 3/4)
perc25.NEH
perc75.NEH
# percentil 25% GE
perc25.GE <- quantile(vector.GE, probs = 1/4)
# percentil 75% GE
perc75.GE <- quantile(vector.GE, probs = 3/4)
perc25.GE
perc75.GE
# varianza NEH
var.NEH <- var(vector.NEH)
# desviación típica NEH
desv.tip.NEH <- sd(vector.NEH)
# varianza GE
var.GE <- var(vector.GE)
# desviación típica GE
desv.tip.GE <- sd(vector.GE)
var.NEH
desv.tip.NEH
var.GE
gasto.ed
vector.GE
intervalos.GE
media.GE
desv.tip.GE
# calcula el coeficiente de variación
CalcularCoefVar <- function(desv.tip, media){
return(desv.tip / media)
}
# coeficiente de variación NEH
coef.var.NEH <- CalcularCoefVar(desv.tip.NEH, media.NEH)
# coeficiente de variación GE
coef.var.GE <- CalcularCoefVar(desv.tip.GE, media.GE)
coef.var.NEH
coef.var.GE
# calcula la cuasivarianza
CalcularCuasivar <- function(var) {
return(var * n.total / (n.total - 1))
}
# cuasivarianza NEH
cuasivar.NEH <- CalcularCuasivar(var.NEH)
# cuasivarianza GE
cuasivar.GE <- CalcularCuasivar(var.GE)
# cuasidesviación típica NEH
cuasidesv.tip.NEH <- sqrt(cuasivar.NEH)
# cuasidesviación típica GE
cuasidesv.tip.GE <- sqrt(cuasivar.GE)
cuasivar.GE
cuasidesv.tip.GE
cuasivar.NEH
cuasidesv.tip.NEH
# coeficiente de asimetría NEH
coef.asim.NEH <- skewness(vector.NEH)
install.packages("moments")
library(moments)
# coeficiente de asimetría NEH
coef.asim.NEH <- skewness(vector.NEH)
coef.asim.NEH
# coeficiente de kurtosis NEH
coef.kurt.NEH <- kurtosis(vector.NEH)
# coeficiente de asimetría GE
coef.asim.GE <- skewness(vector.GE)
coef.asim.GE
coef.kurt.NEH
# coeficiente de kurtosis GE
coef.kurt.GE <- kurtosis(vector.GE)
coef.kurt.GE
